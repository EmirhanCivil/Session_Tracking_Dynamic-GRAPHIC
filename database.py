import cx_Oracle

def init_db(conn):
    cursor = conn.cursor()
    try:
        cursor.execute('''
            BEGIN
                EXECUTE IMMEDIATE 'CREATE TABLE users (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR2(50) UNIQUE NOT NULL,
                    password VARCHAR2(50) NOT NULL,
                    role VARCHAR2(10) NOT NULL
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
        ''')
        cursor.execute('''
            BEGIN
                EXECUTE IMMEDIATE 'CREATE TABLE products (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    product_name VARCHAR2(100),
                    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id)
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
        ''')
        cursor.execute('''
            BEGIN
                EXECUTE IMMEDIATE 'CREATE TABLE oturumlar (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    CONSTRAINT fk_user_oturumlar FOREIGN KEY (user_id) REFERENCES users(id)
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
        ''')
        cursor.execute('''
                    BEGIN
                        EXECUTE IMMEDIATE 'CREATE TABLE dataguard_gap_ekrani (
                            INST_ID NUMBER(10),
                            SOURCE_DBID NUMBER(10),
                            SOURCE_DB_UNIQUE_NAME VARCHAR2(100),
                            NAME VARCHAR2(100),
                            UNIT VARCHAR2(50),
                            VALUE INTERVAL DAY(2) TO SECOND(6),
                            TIME_COMPUTED TIMESTAMP,
                            DATUM_TIME TIMESTAMP,
                            CON_ID NUMBER(10)
                        )';
                    EXCEPTION
                        WHEN OTHERS THEN
                            IF SQLCODE != -955 THEN
                                RAISE;
                            END IF;
                    END;
                ''')

        conn.commit()
    finally:
        cursor.close()

def register_user(conn, username, password, role):
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (username, password, role) VALUES (:1, :2, :3)", (username, password, role))
        conn.commit()
    finally:
        cursor.close()

def login_user(conn, username, password):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM users WHERE username = :1 AND password = :2", (username, password))
        return cursor.fetchone()
    finally:
        cursor.close()

def create_product(conn, user_id, product_name):
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO products (user_id, product_name) VALUES (:1, :2)", (user_id, product_name))
        conn.commit()
    finally:
        cursor.close()

def get_products(conn, user_id):
    cursor = conn.cursor()
    try:
        if user_id is None:
            cursor.execute("SELECT * FROM products")
        else:
            cursor.execute("SELECT * FROM products WHERE user_id = :1", (user_id,))
        return cursor.fetchall()
    finally:
        cursor.close()

def delete_product(conn, product_id):
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM products WHERE id = :1", (product_id,))
        conn.commit()
    finally:
        cursor.close()

def get_sessions(conn):
    cursor = conn.cursor()

    cursor.execute("""
        SELECT o.id AS session_id, o.user_id, u.username, o.login_time
        FROM oturumlar o
        JOIN users u ON o.user_id = u.id
        ORDER BY o.login_time DESC
    """)

    sessions = cursor.fetchall()
    cursor.close()
    return sessions